# Generated by Django 4.1.4 on 2022-12-13 23:31

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_student', models.BooleanField(default=1)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='enter short caegory name', max_length=155, verbose_name='category title')),
                ('description', models.TextField(help_text='long category description', verbose_name='long description')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, help_text='date category was created', verbose_name='date added')),
            ],
            options={
                'verbose_name_plural': 'categories',
                'ordering': ['-date', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Reel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Enter a title for your short video', max_length=255, verbose_name='video title')),
                ('description', models.TextField(help_text='Enter a description for your short video', verbose_name='long description')),
                ('cover_thumbnail', models.FileField(blank=True, help_text='cover image', null=True, upload_to='reels/cover', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png'])], verbose_name='video cover')),
                ('video', models.FileField(help_text='upload short video file less than 15 minutes', upload_to='reels', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['MOV', 'avi', 'mp4', 'webm', 'mkv'])], verbose_name='video file')),
                ('published', models.BooleanField(default=False, help_text='Designates whether video has been published.', verbose_name='published status')),
                ('date_posted', models.DateTimeField(default=django.utils.timezone.now, help_text='date video was uploaded', verbose_name='date uploaded')),
                ('category', models.ManyToManyField(help_text='choose a category for your short video', to='core.category', verbose_name='video category')),
                ('uploader', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='uploaded by')),
            ],
            options={
                'ordering': ['-date_posted', 'title'],
            },
        ),
        migrations.CreateModel(
            name='View',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, help_text='date view was made', verbose_name='date viewed')),
                ('real', models.ForeignKey(help_text='reel viewed', on_delete=django.db.models.deletion.CASCADE, to='core.reel', verbose_name='viewed reel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='viewer', to=settings.AUTH_USER_MODEL, verbose_name='viewed by')),
            ],
            options={
                'ordering': ['-date', 'user'],
            },
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, help_text='date like was recorded', verbose_name='date liked')),
                ('real', models.ForeignKey(help_text='reel liked', on_delete=django.db.models.deletion.CASCADE, related_name='liked', to='core.reel', verbose_name='liked reel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='liker', to=settings.AUTH_USER_MODEL, verbose_name='liked by')),
            ],
            options={
                'ordering': ['-date', 'user'],
            },
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, help_text='date favorite was added', verbose_name='date favorited')),
                ('real', models.ForeignKey(help_text='reel being favorited', on_delete=django.db.models.deletion.CASCADE, related_name='favoriited', to='core.reel', verbose_name='favorite on')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favoriter', to=settings.AUTH_USER_MODEL, verbose_name='favorited by')),
            ],
            options={
                'ordering': ['-date', 'user'],
            },
        ),
        migrations.CreateModel(
            name='Dislike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, help_text='date dislike was recorded', verbose_name='date disliked')),
                ('real', models.ForeignKey(help_text='reel disliked', on_delete=django.db.models.deletion.CASCADE, related_name='disliked', to='core.reel', verbose_name='disliked reel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='disliker', to=settings.AUTH_USER_MODEL, verbose_name='disliked by')),
            ],
            options={
                'ordering': ['-date', 'user'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(help_text='comment on reels')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, help_text='date comment was made', verbose_name='date commented')),
                ('real', models.ForeignKey(help_text='reel commented on', on_delete=django.db.models.deletion.CASCADE, related_name='commented', to='core.reel', verbose_name='comment on')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commenter', to=settings.AUTH_USER_MODEL, verbose_name='commented by')),
            ],
            options={
                'ordering': ['-date', 'user'],
            },
        ),
    ]
